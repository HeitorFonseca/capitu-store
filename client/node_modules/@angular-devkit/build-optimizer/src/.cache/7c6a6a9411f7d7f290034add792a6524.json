{"remainingRequest":"C:\\Users\\Heitor Araujo\\Documents\\workspace\\capitu_store\\client\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\Heitor Araujo\\Documents\\workspace\\capitu_store\\client\\node_modules\\ng2-auto-complete\\dist\\ng2-auto-complete.js","dependencies":[{"path":"C:\\Users\\Heitor Araujo\\Documents\\workspace\\capitu_store\\client\\node_modules\\ng2-auto-complete\\dist\\ng2-auto-complete.js","mtime":1490210990000},{"path":"C:\\Users\\Heitor Araujo\\Documents\\workspace\\capitu_store\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1531766378433},{"path":"C:\\Users\\Heitor Araujo\\Documents\\workspace\\capitu_store\\client\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["\"use strict\";\nvar core_1 = require(\"@angular/core\");\nvar http_1 = require(\"@angular/http\");\nrequire(\"rxjs/add/operator/map\");\n/**\n * provides auto-complete related utility functions\n */\nvar Ng2AutoComplete = /*@__PURE__*/ (function () {\n    function Ng2AutoComplete(http) {\n        this.http = http;\n        // ...\n    }\n    Ng2AutoComplete.prototype.filter = function (list, keyword, matchFormatted) {\n        var _this = this;\n        return list.filter(function (el) {\n            var objStr = matchFormatted ? _this.getFormattedListItem(el).toLowerCase() : JSON.stringify(el).toLowerCase();\n            keyword = keyword.toLowerCase();\n            //console.log(objStr, keyword, objStr.indexOf(keyword) !== -1);\n            return objStr.indexOf(keyword) !== -1;\n        });\n    };\n    Ng2AutoComplete.prototype.getFormattedListItem = function (data) {\n        var formatted;\n        var formatter = this.listFormatter || '(id) value';\n        if (typeof formatter === 'function') {\n            formatted = formatter.apply(this, [data]);\n        }\n        else if (typeof data !== 'object') {\n            formatted = data;\n        }\n        else if (typeof formatter === 'string') {\n            formatted = formatter;\n            var matches = formatter.match(/[a-zA-Z0-9_\\$]+/g);\n            if (matches && typeof data !== 'string') {\n                matches.forEach(function (key) {\n                    formatted = formatted.replace(key, data[key]);\n                });\n            }\n        }\n        return formatted;\n    };\n    /**\n     * return remote data from the given source and options, and data path\n     */\n    Ng2AutoComplete.prototype.getRemoteData = function (keyword) {\n        var _this = this;\n        if (typeof this.source !== 'string') {\n            throw \"Invalid type of source, must be a string. e.g. http://www.google.com?q=:my_keyword\";\n        }\n        else if (!this.http) {\n            throw \"Http is required.\";\n        }\n        var matches = this.source.match(/:[a-zA-Z_]+/);\n        if (matches === null) {\n            throw \"Replacement word is missing.\";\n        }\n        var replacementWord = matches[0];\n        var url = this.source.replace(replacementWord, keyword);\n        return this.http.get(url)\n            .map(function (resp) { return resp.json(); })\n            .map(function (resp) {\n            var list = resp.data || resp;\n            if (_this.pathToData) {\n                var paths = _this.pathToData.split(\".\");\n                paths.forEach(function (prop) { return list = list[prop]; });\n            }\n            return list;\n        });\n    };\n    ;\n    Ng2AutoComplete.decorators = [\n        { type: core_1.Injectable },\n    ];\n    /** @nocollapse */\n    Ng2AutoComplete.ctorParameters = [\n        { type: http_1.Http, decorators: [{ type: core_1.Optional },] },\n    ];\n    return Ng2AutoComplete;\n}());\nexports.Ng2AutoComplete = Ng2AutoComplete;\n",null]}