{"remainingRequest":"C:\\Users\\Heitor Araujo\\Documents\\workspace\\capitu_store\\client\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\Heitor Araujo\\Documents\\workspace\\capitu_store\\client\\node_modules\\ng2-auto-complete\\dist\\ng2-auto-complete.component.js","dependencies":[{"path":"C:\\Users\\Heitor Araujo\\Documents\\workspace\\capitu_store\\client\\node_modules\\ng2-auto-complete\\dist\\ng2-auto-complete.component.js","mtime":1490210990000},{"path":"C:\\Users\\Heitor Araujo\\Documents\\workspace\\capitu_store\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1531766378433},{"path":"C:\\Users\\Heitor Araujo\\Documents\\workspace\\capitu_store\\client\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["\"use strict\";\nvar core_1 = require(\"@angular/core\");\nvar ng2_auto_complete_1 = require(\"./ng2-auto-complete\");\n/**\n * show a selected date in monthly calendar\n * Each filteredList item has the following property in addition to data itself\n *   1. displayValue as string e.g. Allen Kim\n *   2. dataValue as any e.g.\n */\nvar Ng2AutoCompleteComponent = /*@__PURE__*/ (function () {\n    /**\n     * constructor\n     */\n    function Ng2AutoCompleteComponent(elementRef, autoComplete) {\n        var _this = this;\n        this.autoComplete = autoComplete;\n        this.minChars = 0;\n        this.loadingText = \"Loading\";\n        this.showInputTag = true;\n        this.showDropdownOnInit = false;\n        this.tabToSelect = true;\n        this.matchFormatted = false;\n        this.valueSelected = new core_1.EventEmitter();\n        this.dropdownVisible = false;\n        this.isLoading = false;\n        this.filteredList = [];\n        this.minCharsEntered = false;\n        this.itemIndex = 0;\n        this.reloadListInDelay = function (evt) {\n            var delayMs = _this.isSrcArr() ? 10 : 500;\n            var keyword = evt.target.value;\n            // executing after user stopped typing\n            _this.delay(function () { return _this.reloadList(keyword); }, delayMs);\n        };\n        this.inputElKeyHandler = function (evt) {\n            var totalNumItem = _this.filteredList.length;\n            switch (evt.keyCode) {\n                case 27:\n                    break;\n                case 38:\n                    _this.itemIndex = (totalNumItem + _this.itemIndex - 1) % totalNumItem;\n                    break;\n                case 40:\n                    _this.dropdownVisible = true;\n                    _this.itemIndex = (totalNumItem + _this.itemIndex + 1) % totalNumItem;\n                    break;\n                case 13:\n                    if (_this.filteredList.length > 0) {\n                        _this.selectOne(_this.filteredList[_this.itemIndex]);\n                    }\n                    evt.preventDefault();\n                    break;\n                case 9:\n                    if (_this.tabToSelect && _this.filteredList.length > 0) {\n                        _this.selectOne(_this.filteredList[_this.itemIndex]);\n                    }\n                    break;\n            }\n        };\n        this.delay = (function () {\n            var timer = 0;\n            return function (callback, ms) {\n                clearTimeout(timer);\n                timer = setTimeout(callback, ms);\n            };\n        })();\n        this.el = elementRef.nativeElement;\n    }\n    Ng2AutoCompleteComponent.prototype.isSrcArr = function () {\n        return (this.source.constructor.name === \"Array\");\n    };\n    /**\n     * user enters into input el, shows list to select, then select one\n     */\n    Ng2AutoCompleteComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.autoComplete.source = this.source;\n        this.autoComplete.pathToData = this.pathToData;\n        this.autoComplete.listFormatter = this.listFormatter;\n        setTimeout(function () {\n            if (_this.autoCompleteInput) {\n                _this.autoCompleteInput.nativeElement.focus();\n            }\n            if (_this.showDropdownOnInit) {\n                _this.showDropdownList({ target: { value: '' } });\n            }\n        });\n    };\n    Ng2AutoCompleteComponent.prototype.showDropdownList = function (event) {\n        this.dropdownVisible = true;\n        this.reloadList(event.target.value);\n    };\n    Ng2AutoCompleteComponent.prototype.hideDropdownList = function () {\n        this.dropdownVisible = false;\n    };\n    Ng2AutoCompleteComponent.prototype.findItemFromSelectValue = function (selectText) {\n        var matchingItems = this.filteredList\n            .filter(function (item) { return ('' + item) === selectText; });\n        return matchingItems.length ? matchingItems[0] : null;\n    };\n    Ng2AutoCompleteComponent.prototype.reloadList = function (keyword) {\n        var _this = this;\n        this.filteredList = [];\n        if (keyword.length < (this.minChars || 0)) {\n            this.minCharsEntered = false;\n            return;\n        }\n        else {\n            this.minCharsEntered = true;\n        }\n        if (this.isSrcArr()) {\n            this.isLoading = false;\n            this.filteredList = this.autoComplete.filter(this.source, keyword, this.matchFormatted);\n            if (this.maxNumList) {\n                this.filteredList = this.filteredList.slice(0, this.maxNumList);\n            }\n        }\n        else {\n            this.isLoading = true;\n            if (typeof this.source === \"function\") {\n                // custom function that returns observable\n                this.source(keyword).subscribe(function (resp) {\n                    if (_this.pathToData) {\n                        var paths = _this.pathToData.split(\".\");\n                        paths.forEach(function (prop) { return resp = resp[prop]; });\n                    }\n                    _this.filteredList = resp;\n                    if (_this.maxNumList) {\n                        _this.filteredList = _this.filteredList.slice(0, _this.maxNumList);\n                    }\n                }, function (error) { return null; }, function () { return _this.isLoading = false; } // complete\n                );\n            }\n            else {\n                // remote source\n                this.autoComplete.getRemoteData(keyword).subscribe(function (resp) {\n                    _this.filteredList = resp;\n                    if (_this.maxNumList) {\n                        _this.filteredList = _this.filteredList.slice(0, _this.maxNumList);\n                    }\n                }, function (error) { return null; }, function () { return _this.isLoading = false; } // complete\n                );\n            }\n        }\n    };\n    Ng2AutoCompleteComponent.prototype.selectOne = function (data) {\n        this.valueSelected.emit(data);\n    };\n    ;\n    Object.defineProperty(Ng2AutoCompleteComponent.prototype, \"emptyList\", {\n        get: function () {\n            return !(this.isLoading ||\n                (this.minCharsEntered && !this.isLoading && !this.filteredList.length) ||\n                (this.filteredList.length));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Ng2AutoCompleteComponent.decorators = [\n        { type: core_1.Component, args: [{\n                    selector: \"ng2-auto-complete\",\n                    template: \"\\n  <div class=\\\"ng2-auto-complete\\\">\\n\\n    <!-- keyword input -->\\n    <input *ngIf=\\\"showInputTag\\\"\\n           #autoCompleteInput class=\\\"keyword\\\"\\n           placeholder=\\\"{{placeholder}}\\\"\\n           (focus)=\\\"showDropdownList($event)\\\"\\n           (blur)=\\\"hideDropdownList()\\\"\\n           (keydown)=\\\"inputElKeyHandler($event)\\\"\\n           (input)=\\\"reloadListInDelay($event)\\\"\\n           [(ngModel)]=\\\"keyword\\\" />\\n\\n    <!-- dropdown that user can select -->\\n    <ul *ngIf=\\\"dropdownVisible\\\" [class.empty]=\\\"emptyList\\\">\\n      <li *ngIf=\\\"isLoading\\\" class=\\\"loading\\\">{{loadingText}}</li>\\n      <li *ngIf=\\\"minCharsEntered && !isLoading && !filteredList.length\\\"\\n           (mousedown)=\\\"selectOne('')\\\"\\n           class=\\\"no-match-found\\\">{{noMatchFoundText || 'No Result Found'}}</li>\\n      <li *ngIf=\\\"blankOptionText && filteredList.length\\\"\\n          (mousedown)=\\\"selectOne('')\\\"\\n          class=\\\"blank-item\\\">{{blankOptionText}}</li>\\n      <li class=\\\"item\\\"\\n          *ngFor=\\\"let item of filteredList; let i=index\\\"\\n          (mousedown)=\\\"selectOne(item)\\\"\\n          [ngClass]=\\\"{selected: i === itemIndex}\\\"\\n          [innerHtml]=\\\"autoComplete.getFormattedListItem(item)\\\">\\n      </li>\\n    </ul>\\n\\n  </div>\",\n                    providers: [ng2_auto_complete_1.Ng2AutoComplete],\n                    styles: [\"\\n  @keyframes slideDown {\\n    0% {\\n      transform:  translateY(-10px);\\n    }\\n    100% {\\n      transform: translateY(0px);\\n    }\\n  }\\n  .ng2-auto-complete {\\n    background-color: transparent;\\n  }\\n  .ng2-auto-complete > input {\\n    outline: none;\\n    border: 0;\\n    padding: 2px; \\n    box-sizing: border-box;\\n    background-clip: content-box;\\n  }\\n\\n  .ng2-auto-complete > ul {\\n    background-color: #fff;\\n    margin: 0;\\n    width : 100%;\\n    overflow-y: auto;\\n    list-style-type: none;\\n    padding: 0;\\n    border: 1px solid #ccc;\\n    box-sizing: border-box;\\n    animation: slideDown 0.1s;\\n  }\\n  .ng2-auto-complete > ul.empty {\\n    display: none;\\n  }\\n\\n  .ng2-auto-complete > ul li {\\n    padding: 2px 5px;\\n    border-bottom: 1px solid #eee;\\n  }\\n\\n  .ng2-auto-complete > ul li.selected {\\n    background-color: #ccc;\\n  }\\n\\n  .ng2-auto-complete > ul li:last-child {\\n    border-bottom: none;\\n  }\\n\\n  .ng2-auto-complete > ul li:hover {\\n    background-color: #ccc;\\n  }\"\n                    ],\n                    encapsulation: core_1.ViewEncapsulation.None\n                },] },\n    ];\n    /** @nocollapse */\n    Ng2AutoCompleteComponent.ctorParameters = [\n        { type: core_1.ElementRef, },\n        { type: ng2_auto_complete_1.Ng2AutoComplete, },\n    ];\n    Ng2AutoCompleteComponent.propDecorators = {\n        'listFormatter': [{ type: core_1.Input, args: [\"list-formatter\",] },],\n        'source': [{ type: core_1.Input, args: [\"source\",] },],\n        'pathToData': [{ type: core_1.Input, args: [\"path-to-data\",] },],\n        'minChars': [{ type: core_1.Input, args: [\"min-chars\",] },],\n        'placeholder': [{ type: core_1.Input, args: [\"placeholder\",] },],\n        'blankOptionText': [{ type: core_1.Input, args: [\"blank-option-text\",] },],\n        'noMatchFoundText': [{ type: core_1.Input, args: [\"no-match-found-text\",] },],\n        'acceptUserInput': [{ type: core_1.Input, args: [\"accept-user-input\",] },],\n        'loadingText': [{ type: core_1.Input, args: [\"loading-text\",] },],\n        'maxNumList': [{ type: core_1.Input, args: [\"max-num-list\",] },],\n        'showInputTag': [{ type: core_1.Input, args: [\"show-input-tag\",] },],\n        'showDropdownOnInit': [{ type: core_1.Input, args: [\"show-dropdown-on-init\",] },],\n        'tabToSelect': [{ type: core_1.Input, args: [\"tab-to-select\",] },],\n        'matchFormatted': [{ type: core_1.Input, args: [\"match-formatted\",] },],\n        'valueSelected': [{ type: core_1.Output },],\n        'autoCompleteInput': [{ type: core_1.ViewChild, args: ['autoCompleteInput',] },],\n    };\n    return Ng2AutoCompleteComponent;\n}());\nexports.Ng2AutoCompleteComponent = Ng2AutoCompleteComponent;\n",null]}